// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.1.x", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  RESPONDER
  USER
}

model User {
  // Meta
  id String @id @unique @default(cuid())
  email String @unique
  name String
  userRole UserRole @default(USER)
  verified Boolean @default(false)
  
  // Credentials
  username String @unique
  password String
  
  // Reports features
  reports Report[]
  upvotedReports Report[] @relation("UpvotedReports")
  downvotedReports Report[] @relation("DownvotedReports")
}

model Report {
  // Meta
  id String @id @unique @default(cuid())
  createdAt DateTime  @default(now())
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  // Votes
  upvotes Int @default(0)
  downvotes Int @default(0)
  upvotedBy User[] @relation("UpvotedReports")
  downvotedBy User[] @relation("DownvotedReports")

  // Content
  title String
  description String
  latitude Float
  longitude Float
  images Image[]
}

model Image {
  // Meta
  id String @id @unique @default(cuid())
  report Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId String

  // Content
  source String
  description String
}